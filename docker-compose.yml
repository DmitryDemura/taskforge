services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_USER: taskforge
      POSTGRES_PASSWORD: taskforge
      POSTGRES_DB: taskforge
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U taskforge -d taskforge || exit 1']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  redis:
    image: redis:7
    restart: unless-stopped
    command: ['redis-server', '--appendonly', 'yes']
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /app
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgresql://taskforge:taskforge@db:5432/taskforge
      REDIS_URL: redis://redis:6379
      PORT: 2999
      NODE_ENV: development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - '2999:2999'
      - '5555:5555'
    command: node dist/main.js
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'node -e "fetch(''http://localhost:2999/api/health'',{cache:''no-store''}).then(r=>process.exit(r.ok?0:1)).catch(()=>process.exit(1))"',
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    ports:
      - '3001:3001'
    depends_on:
      - api

volumes:
  db_data:
  redis_data:
